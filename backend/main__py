from fastapi import FastAPI, Depends, HTTPException, status, BackgroundTasks
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy import Column, Integer, String, ForeignKey, Boolean, DateTime, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker, relationship, Session
from passlib.context import CryptContext
from dotenv import load_dotenv
import os
import jwt
import smtplib
from email.mime.text import MIMEText
import requests
from bs4 import BeautifulSoup

# Загрузка переменных окружения
load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY", "your_secret_key")
ALGORITHM = "HS256"
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@db/jobsearch")
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USER = os.getenv("SMTP_USER", "your_email@gmail.com")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "your_password")

# Настройки базы данных
engine = create_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

app = FastAPI()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/token")
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Определение модели вакансии
class JobApplication(Base):
    __tablename__ = "job_applications"
    id = Column(Integer, primary_key=True, index=True)
    company = Column(String, nullable=False)
    site = Column(String, nullable=True)
    position = Column(String, nullable=False)
    position_link = Column(String, nullable=True)
    cv_sent = Column(Boolean, default=False)
    recruiter_contacted = Column(Boolean, default=False)
    interview_1 = Column(Boolean, default=False)
    interview_2 = Column(Boolean, default=False)
    offer_received = Column(Boolean, default=False)
    user_id = Column(Integer, ForeignKey("users.id"))

# Функция для отправки email уведомлений
def send_email_notification(email: str, subject: str, message: str):
    msg = MIMEText(message)
    msg["Subject"] = subject
    msg["From"] = SMTP_USER
    msg["To"] = email
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.sendmail(SMTP_USER, email, msg.as_string())

# Функция авто-фоллоуапа
async def auto_followup(email: str, company: str, background_tasks: BackgroundTasks):
    subject = f"Follow-up on Application at {company}"
    message = f"Hello, I wanted to follow up on my application for the position at {company}. Looking forward to your response."
    background_tasks.add_task(send_email_notification, email, subject, message)

# Эндпоинт сохранения вакансии
@app.post("/save-job/")
async def save_job_endpoint(company: str, site: str, position: str, position_link: str):
    return {"message": "Job saved successfully", "company": company, "position": position}

@app.get("/user/jobs/")
async def get_user_jobs():
    return {"jobs": [{"company": "Google", "position": "Software Engineer"}]}

@app.post("/followup/")
async def followup_email(email: str, company: str, background_tasks: BackgroundTasks):
    await auto_followup(email, company, background_tasks)
    return {"message": "Follow-up email scheduled"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
